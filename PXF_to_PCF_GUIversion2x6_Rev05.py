#region README
#Original code made by: Gabriel Passos
#Consulting on technical necessities: Luis Moura(luis.moura@hatch.com) - Belo Horizonte Office Senior Engineer - Piping
#GUI Code: Edgard Melo (edgard.melo@hatch.com) - Belo Horizonte Office Intern - PAT
#Code updater/maintainer: Kirsten Barrie (kristen.barrie@hatch.com) - Saskatoon Office - Mechanical EIT
#date: 2024-06-28
#version: 2.6
#Belo Horizonte / Saskatoon Offices
#endregion

#region Patch Notes
#********************************************         Patch Notes          ********************************************
#Version 2.6:
#- Rev01: Added the ability to convert the insulation thickness from PXF to PCF
#- Rev02: Added the list of PXF files and a separated button to convert and browse the files
#- Rev03: Worked on the flange conversion, now the flanges are converted to PCF (for the GUI interface I just swaped the import of Get_Attributes_V0x6 to Get_Attributes_V0x7)
#-
#Known issues:
#- No known issues with the GUI.
#-
#Future improvements:
#- Improve the interface and add options as requested, for now, the GUI is finished.
#-
#**********************************************************************************************************************
#endregion

#region Import Section
#*******************************************         Import section        *******************************************
from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QGridLayout, QPushButton, QLineEdit, QFileDialog, QCheckBox, QVBoxLayout, QHBoxLayout, QDialog,QMainWindow, QMessageBox, QScrollArea, QTableWidget, QTableWidgetItem, QSizePolicy, QAbstractScrollArea
from PyQt5 import QtCore
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QImage, QPixmap, QDoubleValidator
import numpy as np
import os
import base64
import sys
import Get_Attributes_V0x8 as gets_PXF
#**************************************py********************************************************************************
#endregion

#region Mapping Section
#*******************************************         Mapping section        *******************************************
""" defining the codes to avoid 'magic numbers' """
CODE_1000 = "1000" # Name of the line
CODE_1001 = "1001" # Metric or imperial identification
CODE_2006 = "2006" # Database Link, for example: '5f7f1a41-1b8f-4235-b764-2f8cdf6a1022' 
CODE_2022 = "2022" # Weight of the component in Kg if in metric and in Lb if in imperial
CODE_2023 = "2023" # Insulation thickness  <-- Important for the current task
CODE_2040 = "2040" # Nominal main size
CODE_2044 = "2044" # 
CODE_2050 = "2050" # Piping spec
CODE_2051 = "2051" # Pipe schedule
CODE_2052 = "2052" # Pressure class
CODE_2053 = "2053" # Line Name/Number
CODE_2055 = "2055" # Long description
CODE_2056 = "2056" # Short description
CODE_2062 = "2062" # Material of the component
CODE_2100 = "2100" # Class name
CODE_2106 = "2106" # 
CODE_3000 = "3000" # Initial point coordinates
CODE_3002 = "3002" # Nominal size at the initial coordinates
CODE_3020 = "3020" # Second point coordinates
CODE_3022 = "3022" # Norminal size at the second coordinates
CODE_3040 = "3040" # Third point coordinates
CODE_3042 = "3042" # Norminal size at the third coordinates
CODE_3060 = "3060" # Fourth point coordinates *used for tees*
#**********************************************************************************************************************
#endregion

#region Main Window
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.about_window = None
        self.how_to_use_window = None
        self.file_selection_window = None
        self.dark_mode_flag = None
        self.setWindowTitle("Hatch PXF to PCF Converter V2.6")
        
        #region main window layout
        # Create a QWidget instance
        central_widget = QWidget()
        # Create a grid layout
        layout = QGridLayout()
        # Set the layout on the QWidget
        central_widget.setLayout(layout)
        # Set the background color to white
        central_widget.setStyleSheet("background-color: white;")
        # Set the QWidget as the central widget
        self.setCentralWidget(central_widget)
        self.setGeometry(100, 100, 440, 200)

        """ Base 64 was used to insert the Hatch logo in the window without having to use an external file """
        #region Base64 code for Hatch Logo White
        self.base64_image = ""
        #endregion

        #region Base64 code for Hatch Logo Blue Grey
        self.base64_image_bluegrey = "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ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw/eHBhY2tldCBlbmQ9J3cnPz7/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCACoAdQDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD5Dooor6g+TCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoorpvhr8L774j6sscazW9iNwlvfJ3xxELnb1ALElRgHOGzjANc2MxlHC0ZYjESUYxV23/AFq+yWr6HoZTlOMzPFwwOApupUm0kl3fd7Jd22klq2kczRXp3jP9mXUPD+j/AGnTrp9YmVvngS3EbKgUksMudx4A2gZOeK80ubeSzuJIZo3imiYo6OpVkYcEEHoR6VyZXnWCzGDqYKopJb7pr1Ts19x6nEnCGcZBWVDN6DpN6q9nF+kotxb7pO66jKKKK9Q+bCiiigAoroPhr4Cm+I/iddPjl+zoI2llm2h/KUcZ25GcsVHB/iz2Ndl4p/Zd1LSrCOTS7z+1rhpAjQ+UtvtXB+bc0mOCAMe/tXh43iTLMHiVhMTWUZtJ2d7a93blW3Vr8UfZZP4fcRZrl0s1y7CyqUYtpuLjdtWvywvzy3Xwxet1unby2iptT06bR9RuLS4Xy7i1kaGVdwbaykgjI4PI6jioa9qMlJKUdUz4+pTlCThNWa0aejTW6aCiiiqJCiiptO0+bVtQt7W3TzLi6kWKJcgbmY4AyeOp71MpKKcpaJF06c6klCCbbdklq23sku5DRXs0n7JCq/y+Ity+v2DH/tSvOfHfw31TwBqEkd5bTfZfMKQ3Wz93MMttOQSFYhSdpOQK8HLeKsqx9X2OFrKUuzTV/TmSv8j7fiDwz4myPDLF5nhHCntzJxml/i5JS5fWVl0Ofooor6A+FCiivQvhd8ALj4h6DNqFxff2Xbnb9kPkib7V8zK/RwU2le45zxXBmWaYXAUfrGMmoxva77vokrtvyS2TeyZ7fD/DeZZ5i1gMqoupUabsrKyW7bbU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jocZ6gHtWTRWNehTrU5UaqvGSs0+qZ1YLG18HiIYrDScakGpRa3TWqaO18Z/HnXPG2jfYZvs1nCzZc2nmRtKu1lKNlyCpDcjvgVxVFFYYHLsNgqfssLBQjvZHdnXEGY5vX+s5nWlVna15Pp2Ciiiu08cKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigD/2Q=="
        #endregion

        # Convert the base64 string back to an image
        image_bytes = base64.b64decode(self.base64_image)
        image_qbytearray = QtCore.QByteArray.fromRawData(image_bytes)
        image_qimage = QImage.fromData(image_qbytearray)

        # Scale the image to the desired size in pixels
        scaled_hatchLogo = image_qimage.scaled(150, 150, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
        self.image_label = QLabel()
        self.image_label.setPixmap(QPixmap.fromImage(scaled_hatchLogo))
        layout.addWidget(self.image_label, 99, 99)

        # Create a QLabel for the text
        self.minDiam_text_label = QLabel("Minimum Diameter (NPS):")
        self.minDiam_text_label.setAlignment(QtCore.Qt.AlignLeft)
        self.minDiam_text_label.setStyleSheet("font-family: Frutiger; color: #E84A37; font-size: 12px;")
        layout.addWidget(self.minDiam_text_label, 0, 0)

        # Create a QLineEdit for the user to input text
        self.text_input = QLineEdit()
        self.text_input.setValidator(QDoubleValidator(0.00, 999.9999, 4))
        self.text_input.setPlaceholderText("Minimum Diameter (NPS)")
        self.text_input.setStyleSheet("background-color: white;")
        layout.addWidget(self.text_input, 0, 99)

        #Create a button to be used
        self.startConversion = QPushButton("Convert PXF to PCF")
        vbox = QVBoxLayout()
        vbox.addStretch(1)
        hbox = QHBoxLayout()
        hbox.addStretch(1)
        vbox.addLayout(hbox)
        self.startConversion.setLayout(vbox)
        #self.PXF_browse_button.setStyleSheet("font-family: Frutiger; font-weight: bold;")
        self.startConversion.setStyleSheet("""
            QPushButton {
                border: 2px solid #E84A37; /* Change the color and thickness of the border */
                border-radius: 5px; /* Adds rounded corners to the button */
                font-weight: bold;
                padding: 5px;
                font-family: Frutiger;
                background-color: #FFFFFF; /* Change the background color */
                color: #000000; /* Change the text color */
            }
            QPushButton:hover {
                border: 2px solid #555555; /* Changes the border color on hover */
                background-color: #EEEEEE; /* Changes the background color on hover */
            }
            QPushButton:pressed {
                border: 2px solid #E84A37; /* Keeps the border color consistent or changes it when pressed */
                background-color: #D3D3D3; /* Changes the background color when pressed */
            }
        """)
        self.startConversion.clicked.connect(self.click_to_convert)
        layout.addWidget(self.startConversion, 101,1)

        #Create a button to be used as browse
        self.browse_button = QPushButton("Select PXF Files")
        vbox = QVBoxLayout()
        vbox.addStretch(1)
        hbox = QHBoxLayout()
        hbox.addStretch(1)
        vbox.addLayout(hbox)
        self.browse_button.setLayout(vbox)
        self.browse_button.setStyleSheet("""
            QPushButton {
                border: 2px solid #E84A37; /* Change the color and thickness of the border */
                border-radius: 5px; /* Adds rounded corners to the button */
                font-weight: bold;
                padding: 5px;
                font-family: Frutiger;
                background-color: #FFFFFF; /* Change the background color */
                color: #000000; /* Change the text color */
            }
            QPushButton:hover {
                border: 2px solid #555555; /* Changes the border color on hover */
                background-color: #EEEEEE; /* Changes the background color on hover */
            }
            QPushButton:pressed {
                border: 2px solid #E84A37; /* Keeps the border color consistent or changes it when pressed */
                background-color: #D3D3D3; /* Changes the background color when pressed */
            }
        """)
        self.browse_button.clicked.connect(self.file_selection)
        self.browse_button.clicked.connect(self.color_correction_table) # Call the color correction function
        layout.addWidget(self.browse_button, 99, 0)
                                        

        # Set the layout on the window
        self.setLayout(layout)

        # Create a QCheckBox
        self.checkbox = QCheckBox("Drag model to x=0, y=0 and z=0")
        self.checkbox.setStyleSheet("QCheckBox { font-size: 12px; font-family: Frutiger; color: #E84A37; }")
        layout.addWidget(self.checkbox, 3, 0)

        # Create a new QCheckBox that is dependent on the first checkbox
        self.dependent_checkbox = QCheckBox("Keep reference coordinates as previous")
        self.dependent_checkbox.setStyleSheet("QCheckBox { font-size: 12px; font-family: Frutiger; color: #E84A37; }")
        self.dependent_checkbox.setVisible(False)
        self.default_geometry = self.geometry
        layout.addWidget(self.dependent_checkbox, 4, 0)

        # Create a QCheckBox for the dark mode toggle
        dark_mode_checkbox = QCheckBox("Dark Mode")
        dark_mode_checkbox.setStyleSheet("QCheckBox { font-size: 12px; font-family: Frutiger; color: #E84A37; }")
        layout.addWidget(dark_mode_checkbox, 101, 0)

        # Connect the stateChanged signal of the checkbox to toggle dark mode
        dark_mode_checkbox.stateChanged.connect(self.toggle_dark_mode)

        # Create an 'About' and 'Help' hyperlink
        about_help_link = QLabel()
        about_help_link.setText('<a href="about">About</a><br><a href="help">Help</a>')
        about_help_link.setAlignment(QtCore.Qt.AlignRight)
        self.about_window = about_window()
        self.how_to_use_window = how_to_use_window()
        layout.addWidget(about_help_link, 101, 99)

        # Create a function to handle hyperlink clicks
        def handle_hyperlink_click(url):
            if url == "about":
                    self.about_window.about_dialog.show()
            elif url == "help":
                # Open a window to show help information
                    self.how_to_use_window.how_to_use_dialog.show()

        # Connect the hyperlink clicks to the handle_hyperlink_click function
        about_help_link.linkActivated.connect(handle_hyperlink_click)

       
        # Create Tooltip for the user
        self.tip_label = QLabel("<u><strong>Important:<br></strong></u><br> To ensure that Caesar II does not condense flanges and valve into a single rigid element, in '<u>Advanced PCF Import</u>' set '<u>Condense Rigids</u>' to <strong>False</strong> and the '<u>Diameter limit</u>' to <strong>-1.000</strong>.<br><br> For instructions on how to use the tool, click the ‘help’ hyperlink on the main window of the program.")
        self.tip_label.setWindowTitle("Tooltip: Caesar II configuration")
        self.tip_label.setWordWrap(True)
        self.tip_label.setGeometry(100,340, 540, 200)  # Adjust position as needed
        self.tip_label.setStyleSheet("font-family: Frutiger; color: black; font-size: 16px; background-color: white; padding: 10px; border: 2px solid #E84A37; border-radius: 5px;")

        # Show the QLabel as a non-modal window
        self.tip_label.show()

        self.show()
        app.exec_()
    #endregion

    def color_correction_table(self):
        self.toggle_dark_mode(self.dark_mode_flag)

    #region toggle_dark_mode_function
    def toggle_dark_mode(self, state):
        self.dark_mode_flag = state

        if self.file_selection_window is None:
            self.file_selection_window = files_selected_window()  #to avoid the error of the file_selection_window not being defined and the user triggered the dark mode

        if state == QtCore.Qt.Checked:
            # Enable dark mode
            self.centralWidget().setStyleSheet("background-color: #425563;")
            self.about_window.about_dialog.setStyleSheet("background-color: #425563; color: #E84A37;")
            self.how_to_use_window.how_to_use_dialog.setStyleSheet("background-color: #425563;color : #E84A37;")
            self.how_to_use_window.how_to_use_dialog_text_label.setStyleSheet("font-family: Frutiger; color: #E84A37;")
            self.file_selection_window.setStyleSheet("background-color: #425563; color: #E84A37;")
            self.tip_label.setStyleSheet("font-family: Frutiger; color: #E84A37; font-size: 16px; background-color: #425563; padding: 10px; border: 2px solid #E84A37; border-radius: 5px;")
            self.file_selection_window.table.setStyleSheet("""
                QTableWidget {
                    font-family: Frutiger;
                    background-color: #425563;
                    color: #E84A37;
                }
                QHeaderView::section {
                    background-color: #425563;
                    color: #E84A37;
                    font-family: Frutiger;
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                }
                QTableCornerButton::section {
                    background-color: #425563;
                    color: #E84A37;
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                }
            """)

            self.startConversion.setStyleSheet("""
                QPushButton {
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                    font-family: Frutiger;
                    background-color: #425563; /* Change the background color */
                    color: #E84A37; /* Change the text color */
                }
                QPushButton:hover {
                    border: 2px solid #E84A37; /* Changes the border color on hover */
                    background-color: #314452; /* Changes the background color on hover */
                }
                QPushButton:pressed {
                    border: 2px solid #E84A37; /* Keeps the border color consistent or changes it when pressed */
                    background-color: #162937; /* Changes the background color when pressed */
                }
            """)

            self.browse_button.setStyleSheet("""
                QPushButton {
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                    font-family: Frutiger;
                    background-color: #425563; /* Change the background color */
                    color: #E84A37; /* Change the text color */
                }
                QPushButton:hover {
                    border: 2px solid #E84A37; /* Changes the border color on hover */
                    background-color: #314452; /* Changes the background color on hover */
                }
                QPushButton:pressed {
                    border: 2px solid #E84A37; /* Keeps the border color consistent or changes it when pressed */
                    background-color: #162937; /* Changes the background color when pressed */
                }
            """)


            # Convert the base64 string back to an image
            image_bytes = base64.b64decode(self.base64_image_bluegrey)
            image_qbytearray = QtCore.QByteArray.fromRawData(image_bytes)
            image_qimage = QImage.fromData(image_qbytearray)

            # Scale the image to the desired size in pixels
            scaled_hatchLogo = image_qimage.scaled(150, 150, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
            self.image_label.setPixmap(QPixmap.fromImage(scaled_hatchLogo))
        else:
            # Disable dark mode
            self.centralWidget().setStyleSheet("background-color: white;")
            self.about_window.about_dialog.setStyleSheet("background-color: white;")
            self.how_to_use_window.how_to_use_dialog.setStyleSheet("background-color: white;")
            self.how_to_use_window.how_to_use_dialog_text_label.setStyleSheet("font-family: Frutiger; color: black;")
            self.file_selection_window.setStyleSheet("background-color: white; color: black;")
            self.tip_label.setStyleSheet("font-family: Frutiger; color:black; font-size: 16px; background-color: white; padding: 10px; border: 2px solid #E84A37; border-radius: 5px;")
            self.file_selection_window.table.setStyleSheet("""
                QTableWidget {
                    font-family: Frutiger;
                    background-color: white;
                }
                QHeaderView::section {
                    background-color: white;
                    font-family: Frutiger;
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                }
                QTableCornerButton::section {
                    background-color: white;
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                }
            """)

            self.startConversion.setStyleSheet("""
                QPushButton {
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                    font-family: Frutiger;
                    background-color: #FFFFFF; /* Change the background color */
                    color: #000000; /* Change the text color */
                }
                QPushButton:hover {
                    border: 2px solid #555555; /* Changes the border color on hover */
                    background-color: #EEEEEE; /* Changes the background color on hover */
                }
                QPushButton:pressed {
                    border: 2px solid #E84A37; /* Keeps the border color consistent or changes it when pressed */
                    background-color: #D3D3D3; /* Changes the background color when pressed */
                }
            """)

            self.browse_button.setStyleSheet("""
                QPushButton {
                    border: 2px solid #E84A37; /* Change the color and thickness of the border */
                    border-radius: 5px; /* Adds rounded corners to the button */
                    font-weight: bold;
                    padding: 5px;
                    font-family: Frutiger;
                    background-color: #FFFFFF; /* Change the background color */
                    color: #000000; /* Change the text color */
                }
                QPushButton:hover {
                    border: 2px solid #555555; /* Changes the border color on hover */
                    background-color: #EEEEEE; /* Changes the background color on hover */
                }
                QPushButton:pressed {
                    border: 2px solid #E84A37; /* Keeps the border color consistent or changes it when pressed */
                    background-color: #D3D3D3; /* Changes the background color when pressed */
                }
            """)

            # Convert the base64 string back to an image
            image_bytes = base64.b64decode(self.base64_image)
            image_qbytearray = QtCore.QByteArray.fromRawData(image_bytes)
            image_qimage = QImage.fromData(image_qbytearray)

            # Scale the image to the desired size in pixels
            scaled_hatchLogo = image_qimage.scaled(150, 150, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
            self.image_label.setPixmap(QPixmap.fromImage(scaled_hatchLogo))
    #endregion

    #region file_selection_function
    def file_selection(self):
        self.file_paths, _ = QFileDialog.getOpenFileNames(self, 'PXF Files', '', "*.pxf")
        if self.file_paths:
            self.file_selection_window = files_selected_window()
            self.file_selection_window.update_table(self.file_paths)
            self.file_selection_window.show()
        else:
            QMessageBox.warning(self, "No file selected", "No file was selected.")
            return  # leaves the function if no file was selected
    #endregion

    #region click_to_convert_function
    def click_to_convert(self):
        min_diameter = self.text_input.text()
        if not min_diameter:
            min_diameter = 0
            self.text_input.setText("0")
            QMessageBox.warning(self, "Input change alert","Since no value was provided for the minimun diameter, the default value was set to 0.")
        if float(min_diameter) < 0:
            QMessageBox.warning(self, "Input Error", "The Minimum Diameter (NPS) cannot be negative.")
            return #leaves the function if the input is invalid
        if self.file_paths:
            coords = gets_PXF.get_reference_coordinates(self.checkbox.isChecked(),self.file_paths[0],min_diameter)
            x_i = coords[0]
            y_i = coords[1]
            z_i = coords[2]
            for file_path in self.file_paths:
                self.convert_pxf_to_pcf(file_path, x_i, y_i, z_i, min_diameter)
        else :
            QMessageBox.warning(self, "No file selected", "No file was selected.")
            return #leaves the function if no file was selected
        QMessageBox.information(self, "Conversion Complete", "The conversion was completed successfully and PCF files are available in the same folder as PXFs!")
    #endregion

    #region closeEvent_function
    def closeEvent(self, event):
        # Create a QMessageBox to confirm the user wants to close the application
        reply = QMessageBox.question(self, 'Close Application', 'Are you sure you want to close the application?', QMessageBox.Yes | QMessageBox.No, QMessageBox.No)

        # If the user clicks 'Yes', close the application
        if reply == QMessageBox.Yes:
            event.accept()
            sys.exit()
        else:
            event.ignore()
    #endregion

    def convert_pxf_to_pcf(self,filename, x_i, y_i, z_i, actual_min_diam):
        """
        Main function that converts a PXF file to a PCF file.

        Parameters:
        filename (str): The name (path) of the PXF file to convert.
        x_i, y_i, z_i (float): The initial coordinates.
        actual_min_diam (float): The actual minimum diameter.

        Returns:
        None
        """
        current_index = 0
        string_pcf = ""
        point_i = x_i, y_i, z_i
        pxf_array = gets_PXF.get_pxf_array(filename)
        function_caller_dict = {
            'PIPE': gets_PXF.get_pipe_string,
            'FLANGE': gets_PXF.get_flange_string,
            'SUPPORT': gets_PXF.get_support_string,
            'ELBOW': gets_PXF.get_elbow_string,
            'TEE': gets_PXF.get_tee_string,
            'REDUCER': gets_PXF.get_reducer_string,
            'GASKET': gets_PXF.get_gasket_string,
            'VALVE': gets_PXF.get_valve_string,
            'OLET': gets_PXF.get_olet_string,
            'GENERAL' : gets_PXF.get_pipe_string,
            'NIPPLE': gets_PXF.get_nipple_string,
            'PCAP': gets_PXF.get_pcap_string,
            'FLOW_METER': gets_PXF.get_flow_meter_string
            # To add more items, add them to the dictionary with the function that will be called
            #remember to add the function to the data treatment function section on the gets file
        }

        for line in pxf_array:
            if line[0] == CODE_1000:  # Get Name of Line
                line_name = line[1]
            if line[0] == CODE_1001:  # Get if it is metric or imperial 
                if 'MMETRIC' in line[1]:
                    inch_or_mm = "MM" 
                else:
                    inch_or_mm = "INCH"

        string_pcf += f"ISOGEN-FILES ISOGEN.FLS\nUNITS-BORE INCH\nUNITS-CO-ORDS {inch_or_mm}\nUNITS-WEIGHT LBS\nUNITS-BOLT-DIA MM\nUNITS-BOLT-LENGTH MM\nPIPELINE-REFERENCE {line_name}\n"

        """ This section is to add the pipe elements"""
        for line in pxf_array:
            if line[0] == CODE_2100:
                
                for key, value in function_caller_dict.items():
                    if key in line[1]:
                        string_pcf += value(pxf_array, current_index, actual_min_diam, point_i,inch_or_mm)
                        break
                else:
                    string_pcf += gets_PXF.get_no_item_string(pxf_array, current_index, actual_min_diam, point_i) # If the item is not recognized, use the default function
            current_index += 1
        """ End of the section to add the pipe elements"""

        gets_PXF.line_string_log(filename)
        output_filename = os.path.splitext(filename)[0] + '.pcf' # Change the file extension to .pcf
        with open(output_filename, 'w') as f:  # write to new file
            f.write(string_pcf)
#endregion

#region files_selected_window
class files_selected_window(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Selected Files")  # Set the window title

        self.table = QTableWidget()
        self.table.setColumnCount(1)  # Set the number of columns in the table
        self.table.setHorizontalHeaderLabels(["Selected Files"])  # Set the header label for the column

        # Set size policy to expand based on content
        self.table.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.table.setSizeAdjustPolicy(QAbstractScrollArea.AdjustToContents)
        self.table.horizontalHeader().setStretchLastSection(True)

        layout = QVBoxLayout()
        layout.addWidget(self.table)
        self.setLayout(layout)  # Set the layout on the QDialog

    def update_table(self, file_paths):
        self.table.setRowCount(len(file_paths))  # Set the number of rows in the table

        for row, file_path in enumerate(file_paths):
            item = QTableWidgetItem(file_path)
            self.table.setItem(row, 0, item)
        
        self.table.resizeColumnsToContents()
        self.table.resizeRowsToContents()
        self.adjustSize()  # Adjust the dialog size to fit the content
#endregion

#region about_window
class about_window(QDialog):
    def __init__(self):
        super().__init__()
        self.about_dialog = QDialog()
        self.about_dialog.setWindowModality(Qt.NonModal)
        self.about_dialog.setWindowTitle("About")
        self.about_dialog.setGeometry(650, 100,0,0)
        self.about_dialog.setStyleSheet("font-family: Frutiger; background-color: white;")

        layout = QVBoxLayout()

        about_text = """
        <strong>Original code made by</strong>: <a href="https://www.linkedin.com/in/gabriel-passos-2993491a4/">Gabriel Passos</a><br>
        <strong>Consulting on technical necessities</strong>: <a href="https://www.linkedin.com/in/luis-fernando-silva-moura-b754a628/">Luis Moura</a> (luis.moura@hatch.com) - Belo Horizonte Office Senior Engineer - Piping<br>
        <strong>Code updater/maintainer</strong>: <a href="https://www.linkedin.com/in/edgard-de-paiva-melo-filho-a06779255/">Edgard Melo</a> (edgard.melo@hatch.com) - Belo Horizonte Office Intern - PAT<br>
        <strong>Code updater/maintainer</strong>: <a href="https://www.linkedin.com/in/kristen-barrie-9335921b6/">Kristen Barrie</a> (kristen.barrie@hatch.com) - Saskatoon Office Mechanical EIT
        """
                
        # Create a QLabel to display the about information
        about_label = QLabel()
        about_label.setText(about_text)
        about_label.setOpenExternalLinks(True)
        layout.addWidget(about_label)
        self.about_dialog.setLayout(layout)
#endregion

#region how_to_use_window
class how_to_use_window(QDialog):
    def __init__(self):
        super().__init__()
        self.how_to_use_dialog = QDialog()
        self.how_to_use_dialog.setWindowModality(Qt.NonModal)
        self.how_to_use_dialog.setWindowTitle("How to use")
        self.how_to_use_dialog.setGeometry(650, 300, 560, 500)
        self.how_to_use_dialog.setStyleSheet("background-color: white;")
        layout = QVBoxLayout()  

        instructions = """
        <strong>--------------------------------------------------------------------------------<br>
        PT-BR:<br>
        --------------------------------------------------------------------------------</strong><br>
        <br>
        O propósito deste programa é converter arquivos PXF em arquivos PCF para análise<br>
        por programas como o CAESAR.<br>
        <br>
        Instruções:<br>
        1 - Escolha o diâmetro mínimo dos componentes de tubulação que você deseja que<br>
        seja incluído no arquivo PCF inserindo o valor na caixa de diâmetro mínimo no<br>
        canto superior direito (não inclua unidades ou letras).<br>
        <br>
        2 - Escolha se deseja que todos os arquivos que você está convertendo sejam<br>
        deslocados para a coordenada 0,0,0 clicando no botão 'Arrastar Coordenadas'.<br>
        NOTA: Isso moverá todos os arquivos que são selecionados de acordo com o<br>
        primeiro arquivo, portanto, se o primeiro arquivo precisar ser movido mais de<br>
        100m, todos os outros arquivos também serão movidos 100m, independentemente de<br>
        onde estiverem no espaço.<br>
        <br>
        3 - Clique no botão Converter PXF para PCF, isso abrirá uma caixa de diálogo de<br>
        arquivo onde você pode escolher quais arquivos deseja converter, você pode<br>
        escolher vários arquivos aqui (usando CTRL ou SHIFT) e todos serão processados.<br>
        <br>
        <br>
        <strong><u>Importante</strong></u>: A configuração do Caesar influencia diretamente em quais elementos serão<br>
        condensados. Para evitar a condensação de flanges e válvulas em um único elemento rígido,<br>
        em 'Advanced PCF Import' defina 'Condense Rigids' como 'False' e o 'Diameter Limit' como '-1.000'.<br>
        <strong>--------------------------------------------------------------------------------<br>
        EN-US:<br>
        --------------------------------------------------------------------------------</strong><br>
        <br>
        The purpose of this program is to take PXF files and convert them into PCF files<br>
        for analysis by programs such as CAESAR.<br>
        <br>
        Instructions:<br>
        <br>
        1 - Choose the minimum diameter of the pipe components you want to be included <br>
        in the PCF file by inputting the value into the minimum diameter box in the top <br>
        right corner (do not include units or letters)<br>
        <br>
        2 - Choose if you want all the files you are converting to be shifted to <br>
        coordinate 0,0,0 by clicking the 'Drag Coordinates' button. NOTE: This will <br>
        move all files that are selected according to the first file, so if the first <br>
        file needs to be moved over 100m all other files will also be moved 100m <br>
        regardless of where they are in space. <br>
        <br>
        3 - Click the Convert PXF to PCF button, this will bring up a file dialog where <br>
        you can choose which files you want to convert, you may choose multiple files <br>
        here (using CTRL or SHIFT)  and they will all be processed. <br>
        <br>
        <br>
        <strong><u>Important</strong></u>: The Caesar configuration directly influences which elements will be condensed.<br>
        To avoid the condensation of flanges and valves into a single rigid element, in <br>
        'Advanced PCF Import' set 'Condense Rigids' to 'False' and the 'Diameter Limit' to '-1.000'.<br>
        <strong>--------------------------------------------------------------------------------<br>
        ES:<br>
        --------------------------------------------------------------------------------</strong><br>
        <br>
        El propósito de este programa es convertir archivos PXF en archivos PCF para su<br>
        análisis por programas como CAESAR.<br>
        <br>
        Instrucciones:<br>
        <br>
        1 - Elija el diámetro mínimo de los componentes de tubería que desea que se<br>
        incluya en el archivo PCF ingresando el valor en la caja de diámetro mínimo en<br>
        la esquina superior derecha (no incluya unidades o letras). <br>
        <br>
        2 - Elija si desea que todos los archivos que está convirtiendo se desplacen a la<br>
        coordenada 0,0,0 haciendo clic en el botón 'Arrastrar coordenadas'. NOTA: Esto<br>
        moverá todos los archivos que se seleccionen de acuerdo con el primer archivo, por<br>
        lo que si el primer archivo necesita moverse más de 100 m, todos los demás<br>
        archivos también se moverán 100 m, independientemente de dónde estén en el espacio.<br>
        <br>
        3 - Click en el botón Convertir PXF a PCF, esto abrirá un cuadro de diálogo de<br>
        archivo donde puede elegir qué archivos desea convertir, puede elegir varios<br>
        archivos aquí (usando CTRL o SHIFT) y todos serán procesados.<br>
        <br>
        <br>
        <strong><u>Importante</strong></u>: La configuración de Caesar influye directamente en qué elementos se condensarán.<br>
        Para evitar la condensación de bridas y válvulas en un solo elemento rígido, en<br>
        'Advanced PCF Import' establezca 'Condense Rigids' en 'False' y el 'Diameter Limit' en '-1.000'.<br>
        <strong>--------------------------------------------------------------------------------<br>
        FR:<br>
        --------------------------------------------------------------------------------</strong><br>
        Il s'agit de convertir des fichiers PXF en fichiers PCF pour analyse par des<br>
        programmes tels que CAESAR.<br>
        <br>
        Instructions:<br>
        <br>
        1 - Choiisissez le diamètre minimum des composants de tuyauterie que vous souhaitez<br>
        inclure dans le fichier PCF en saisissant la valeur dans la boîte de diamètre<br>
        minimum dans le coin supérieur droit (n'incluez pas d'unités ou de lettres).<br>
        <br>
        2 - Choiisissez si vous souhaitez que tous les fichiers que vous convertissez soient<br>
        déplacés à la coordonnée 0,0,0 en cliquant sur le bouton 'Faire glisser les<br>
        coordonnées'. REMARQUE: Cela déplacera tous les fichiers sélectionnés en fonction<br>
        du premier fichier, donc si le premier fichier doit être déplacé de plus de 100 m,<br>
        tous les autres fichiers seront également déplacés de 100 m, indépendamment de leur<br>
        emplacement dans l'espace.<br>
        <br>
        3 - Click sur le bouton Convertir PXF en PCF, cela ouvrira une boîte de dialogue de<br>
        fichier où vous pouvez choisir quels fichiers vous souhaitez convertir, vous pouvez<br>
        choisir plusieurs fichiers ici (en utilisant CTRL ou SHIFT) et ils seront tous<br>
        traités.<br>
        <br>
        <br>
        <strong><u>Important</strong></u>: La configuration de Caesar influence directement les éléments qui seront<br>
        condensés. Pour éviter la condensation des brides et des vannes en un seul élément rigide,<br>
        dans 'Advanced PCF Import', définissez 'Condense Rigids' sur 'False' et la 'Diameter Limit' sur '-1.000'.<br>
        <strong>--------------------------------------------------------------------------------</strong><br>
        """

        # Create a QLabel for the text
        self.how_to_use_dialog_text_label = QLabel(instructions)
        self.how_to_use_dialog_text_label.setAlignment(QtCore.Qt.AlignLeft)
        self.how_to_use_dialog_text_label.setStyleSheet("font-family: Frutiger;")
        # Create a QScrollArea
        scroll = QScrollArea()
        scroll.setWidget(self.how_to_use_dialog_text_label)
        #scroll.setWidgetResizable(True)
        layout.addWidget(scroll)

        # Set the layout on the window
        self.how_to_use_dialog.setLayout(layout)
#endregion

#region Main Loop
if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(True)
    MainWindow()
    sys.exit(app.exec_())
#endregion